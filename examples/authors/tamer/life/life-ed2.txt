; assume +16K RAM, RAM is $4000-$8FFF

.MSFIRST ; Most Significant byte first


	.org $4C00

SCREENSTART	.equ $4000
TEXTSCREENENDP1	.equ $4200
RAMSTART	.equ $4000

; Zero page variables
fastmode	.equ $00B7
svstack	.equ $00B8

xtempsrc	.equ $00BA
xtempdst	.equ $00BC
dtemp	.equ $00BE
movecount	.equ $00C9
rottemp	.equ $00CB
btemp	.equ $00CC

	jmp	progmain
	nop
;- - - - - - - - -

; I am putting this stuff in variables so we can use
;	other multicolor vidmodes with the same code
;	Yes, it would be faster to choose one and use # immediate
;	data, I know.



lgrmode	.byte 32 ; 32	; 64x64 multicolor
lnscanlines	.byte 64
lnvidbytesperrow	.byte 16
lnpixelsperrow	.byte 64
lnpixelsperrowp2	.byte 66	; npixelsperrow + 2
lnvidmulshifts	.byte 4	; number of shifts to multiply by nvidbytesperrow
lnvidbytesperscreen	.word 1024	; number of bytes in screen
lnbitpatterns	.byte 0	; not used
lgrmodeend .byte 0	; dummy
GRMODESIZE	.equ lgrmodeend-lgrmode


hgrmode	.byte 36 ; 4+32	; 128x96 multicolor
hnscanlines	.byte 96
hnvidbytesperrow	.byte 32
hnpixelsperrow	.byte 128
hnpixelsperrowp2	.byte 130	; npixelsperrow + 2
hnvidmulshifts	.byte 5	; number of shifts to multiply by nvidbytesperrow
hnvidbytesperscreen	.word 3072	; number of bytes in screen
hnbitpatterns	.byte 0	; not used
hgrmodeend .byte 0	; dummy

introtext	
	.byte " LIFE-ED\r"
	.byte " BY JAMES TAMER\r"
	.byte "  WITH TLC FROM GREG DIONNE\r"
	.byte " IN EDIT MODE:\r"
	.byte "  WASZ TO MOVE CURSOR\r"
	.byte "  SPACE BAR TO TOGGLE CELL\r"
	.byte "  SHIFT G GENERATIONS MODE\r"
	.byte "  SHIFT L LOAD  * SHIFT S SAVE\r"
	.byte "  SHIFT 1 LORES * SHIFT 2 HIRES\r"
	.byte "  SHIFT C CLEAR * BREAK QUIT\r"
	.byte "\r"
	.byte " IN GENERATIONS MODE:\r"
	.byte "  SHIFT S SLOW  * SHIFT F FAST\r"
	.byte "  SHIFT E EDIT  * BREAK QUIT\r"
	.byte "\r"
	.byte "=HIT SPACE BAR TO START="
	.byte 0

savingtextpre
	.byte " PREPARE TO SAVE\r"
	.byte "\r"
	.byte " PRESS RECORD AND PLAY\r"
	.byte " THEN PRESS THE SPACE BAR\r"
	.byte 0

savingtext
	.byte " SAVING, PLEASE WAIT...\r"
	.byte 0

loadingtextpre
	.byte " PREPARE TO LOAD\r"
	.byte "\r"
	.byte " PRESS THE SPACE BAR\r"
	.byte " THEN PRESS PLAY\r"
	.byte 0

loadingtext
	.byte " LOADING, PLEASE WAIT..."
	.byte 0

notasavefiletext
	.byte " THIS ISN'T A LIFE-ED SAVE FILE\r"
	.byte "\r"
	.byte " PRESS ANY KEY TO CONTINUE"
	.byte 0


;----------
; copymem,
;	source in xtempsrc, dst in xtempdst, count in d
	.MODULE MDCOPYMEM
copymem:
	std	movecount

_copymemlop:
	ldx	xtempsrc
	ldaa	,x
	inx
	stx	xtempsrc
	ldx	xtempdst
	staa	,x
	inx
	stx	xtempdst
	ldx	movecount
	dex
	stx	movecount
	bne	_copymemlop
	rts


;----------
; copymemnz,
;	source in xtempsrcnz, dst in xtempdstnz, count in d
;	Does not use zero page
	.MODULE MDCOPYMEMNZ
copymemnz:
	std	movecountnz

_copymemnzlop:
	ldx	xtempsrcnz
	ldaa	,x
	inx
	stx	xtempsrcnz
	ldx	xtempdstnz
	staa	,x
	inx
	stx	xtempdstnz
	ldx	movecountnz
	dex
	stx	movecountnz
	bne	_copymemnzlop
	rts


;----------
; cmpmem,
;	compare memory, return Z set if equal.  Z clear if unequal.
;	source in xtempsrc, dst in xtempdst, count in d
;
	.MODULE MDCMPMEM
cmpmem:
	std	movecount

_cmpmemlop:
	ldx	xtempsrc
	ldaa	,x
	inx
	stx	xtempsrc

	ldx	xtempdst
	cmpa	,x
	bne	_cmpmemout	; memory blocks are unequal - return
	inx
	stx	xtempdst

	ldx	movecount
	dex
	stx	movecount
	bne	_cmpmemlop
	; Z flag is set, here, if we've gone through all the
	;	memory we wanted to compare

_cmpmemout:
	rts


;----------
; copyup, copy low RAM and screen, etc, up to a higher location
;	for later restoration.
	.MODULE MDCOPYUP
copyup:
	; copy $80-$ff
	ldd	#$80
	std	xtempsrcnz
	ldx	#storestuff
	stx	xtempdstnz
	jsr	copymemnz
	; copy $4000-$43FF
	ldx	#RAMSTART
	stx	xtempsrcnz
	ldx	#storestuff+128
	stx	xtempdstnz
	ldd	#1024
	jsr	copymemnz
	rts

;----------
; copyback, restore low RAM and screen from store
	.MODULE MDCOPYBACK
copyback:
	; copy $80-$ff
	ldd	#$80
	std	xtempdstnz
	ldx	#storestuff
	stx	xtempsrcnz
	jsr	copymemnz
	; copy $4000-$43FF
	ldx	#RAMSTART
	stx	xtempdstnz
	ldx	#storestuff+128
	stx	xtempsrcnz
	ldd	#1024
	jsr	copymemnz
	rts

;----------
; setgraphics, turn on graphics mode
;
	.MODULE MDSETGRAPHICS
setgraphics:	
	ldaa	grmode
	staa	$BFFF
	rts

;----------
; unsetgraphics, back to text mode
;
	.MODULE MDUNSETGRAPHICS
unsetgraphics:	
	clra	
	staa	$BFFF
	staa	txtcursorx
	staa	txtcursory
	rts

;----------
; cleartextscreen,
;
	.MODULE MDCLEARTEXTSCREEN
cleartextscreen:	
	clra	
	staa	txtcursorx
	staa	txtcursory
	ldaa	#32	; space
	ldx	#SCREENSTART
_ctslop:
	staa	,x
	inx
	cpx	#TEXTSCREENENDP1
	bne	_ctslop
	rts

;----------
; prnmess, 
;	print message to text screen, at textcursor,
;	no scrolling, no sensible checks for memory overrun
;	or out of bounds
;	caveat emptor
;	.x points to null-terminated string

	.MODULE MDPRNMESS
prnmess
	clra
	ldab	txtcursory
	asld
	asld
	asld
	asld
	asld
	addd	#SCREENSTART
	std	xtempdst
	stx	xtempsrc

_prnmlop
	ldx	xtempsrc
	ldaa	,x
	beq	_prnmrts
	inx
	stx	xtempsrc

	cmpa	#13	; carriage return
	bne	_prnmstoit

	; carriage return
	; increment text cursor to next line
	clra
	staa	txtcursorx
	inc	txtcursory
	; and adjust the destination
	ldd	xtempdst
	addd	#32	; one line down
	andb	#%11100000	; and point to beginning of line
	; (b is lo byte of d)
	std	xtempdst
	bra	_prnmlop

_prnmstoit:
	ldx	xtempdst
	anda	%00111111	; reverse video letters
	staa	,x
	inx
	stx	xtempdst
	inc	txtcursorx
	ldaa	txtcursorx
	cmpa	#32	; have we gone to the next line?
	bne	_prnmlop
	; increment text cursor to next line
	clra
	staa	txtcursorx
	inc	txtcursory
	bra	_prnmlop
	;-

_prnmrts
	rts


;----------
; fillmem
;	movecount has count, .a has byte, .x has dest
;	uses xtempdst
;	count is assumed nonzero!
fillmem:
	stx	xtempdst
fillmemlop:
	ldx	xtempdst
	staa	,x
	inx
	stx	xtempdst
	ldx	movecount
	dex
	stx	movecount
	bne	fillmemlop
	rts

;----------
; cleargrscreen
cleargrscreen
	ldaa	#0
	ldx	nvidbytesperscreen
	stx	movecount
	ldx	#SCREENSTART
	jsr	fillmem
	rts


;---------- LIFE

; shifted multicolor bit patterns for zero color
ZEROPATTERN4	.equ %00000000
ZEROPATTERN3	.equ %00000000
ZEROPATTERN2	.equ %00000000
ZEROPATTERN1	.equ %00000000

NEWCELLPATTERN4	.equ %10000000
NEWCELLPATTERN3	.equ %00100000
NEWCELLPATTERN2	.equ %00001000
NEWCELLPATTERN1	.equ %00000010


;----------
; makepixelxlattbl
;	calculate bytes needed for expanding a screen line
;	one multicolor byte -> four msbits
	.MODULE MDMAKEPIXELXLATTBL
makepixelxlattbl:
	clrb
	stab	btemp

	ldx	#pixelxlattbl	; destination
_mkxlatlop:
	clr	,x
	ldab	btemp
	ldaa	#4	; four bits per byteprocessed (multicolor)
	staa	rottemp

_mkbitslop
	tba
	anda	#%00000011
	cmpa	#ZEROPATTERN1
	beq	_clrbit
	; not a zero pattern, so set it
	sec
	bra	_rotit
_clrbit
	clc
_rotit
	ror	,x

	lsrb
	lsrb
	dec	rottemp
	bne	_mkbitslop

	inx
	inc	btemp
	bne	_mkxlatlop
	rts

;----------
; breedcolor (Phyber's replacement for "generateone" routine)
;       do one generation in color
;       - birth cells we make red
;       - cells that survive we make blue
	.MODULE MDBREEDCOLOR
breedcolor:
;	do a first pass on the screen.  
;       Reserve $7000-$8000 (hi-res) or $7800-$8000 (lo-res) for our scratch pad...  
;       JT's code didn't seem to use it.

;--this preamble should really be done in setgrmode...
	ldab	nvidbytesperrow	;set up offset pointers for vertical mode
	lslb
	stab	_vof1+1
	lslb
	stab	_vof2+1
	ldd	#$7FFE
	subb	_vof1+1
	std	_hof2+1
	ldd	#$8000
	subd	nvidbytesperscreen
	subd	nvidbytesperscreen
	std	_vof3+1
	ldd	nvidbytesperscreen	;set up bottom of screen pointers
	addd	#SCREENSTART	;
	subd	#1	
	std	_hof1+1	;set up 2nd pass start screen loc
	subd	#1
	std	_bof1+1	;set up 1st pass start screen loc
;--end preamble


; Phyber's recycled zero-page variables
;xtempsrc	.equ $00BA
;xtempdst	.equ $00BC
;dtemp	.equ $00BE
;movecount	.equ $00C9
;rottemp	.equ $00CB
;btemp	.equ $00CC
;cellstatetemp	.equ $00CD
;gonelinedestn	.equ $00CE

zU	.equ $BA	;U and L point to same byte -- just being compact here.  
zL	.equ $BA
zC	.equ $BB
zCTR	.equ $BC
zD	.equ $BD
zCB	.equ $BE
zUD	.equ $CB
zUDC	.equ $CC
z2P	.equ $CD

	sts	svstack	;save stack pointer
_bof1:	ldx	#$43FE 	;start loading graphics at end of screen
	lds	#$7FFF 	;initialize buffer pointer

_horizlop:
	ldd	0,x	;load left and center cells
	andb	#%10101010 	;hack off red/blue bit of center cells
	stab	zC
	lsra		;hack off red/blue bit of left cell
	lsrb		;divide-by-two
	pshb		;save center cell
	lsrd		;transfer left bit to center
	lsrb		;now have left in b.
	stab	zL
	ldaa	zC	;get shifted center
	ldab	2,x	;get right bit
	lsld
	adda	zL
	psha		;save sum of l+r
	dex
	cpx	#SCREENSTART
	bne	_horizlop

_hof1	lds #$43FF	;(bottom of screen)
_hof2	ldx #$7FDE	;(bottom of buffer - 4 * (bytes per row))

_vertlop:
	ldd	$00,x
	aba
	staa	zU
_vof1:	ldd	$20,x
	std	zC	;(c,ctr)
_vof2:	ldd	$40,x
	bne	_vnonz
	ldd	zU
	beq	_vpsh
	ldd	#0
_vnonz	aba
	staa	zD
	tab
	anda	zU 	;now  ud
	orab	zU 	;now (u+d)
	staa	zUD
	tba
	oraa	zC	;now (u+d+c)
	staa	zUDC	
	andb	zC	;now c(u+d)
	orab	zUD	;now c(u+d)+ud
	stab	zCB
	lslb
	tba
	oraa	zUDC	;now 2+
	staa	z2P
	andb	zUDC
	orab	zCB	;now bust
	comb		;now !bust
	stab	zCB
	ldab	zU
	eorb	zC
	eorb	zD
	orab	zCTR
	lslb
	andb	zCB
	andb	z2P
	andb	#%10101010
	tba
	lsrb
	aba
	staa	zCB
	ldab	zCTR
	comb
	andb	zCB
_vpsh:	pshb
	dex
	dex
_vof3:	cpx	#$7800	;(top of buffer)
	bhs	_vertlop

	lds	svstack
	rts
	

;----------
; breedmono (Phyber's replacement for "generateone" routine)
;	do one generation in monochrome
	.MODULE MDBREEDMONO
breedmono:
;	Reserve $7000-$8000 (hi-res) for scratch
;	JT's code didn't seem to use it.
;
;	JT's code supported rendering in two of the MC6847's
;	color graphics modes:  CG1 (64x64) and CG3 (128x96)
;	
;	Of the two, only the CG3 has a compatible resolution
;	with a resolution graphics modes (RG2).  So we'll
;	heed JT's advice:  "Yes, it would be faster to
;	choose one and use # immediate data, I know." 
;	We have no such choice here.  
;
;	May as well just use immediate data.
;
;	The following is a verbatim copy of the RG2 mode
;	variant of Conway's Life I had posted so long ago.
;	Instead of computing the sum of neighbors in a register,
;	we do it 8 bits at a time in parallel -- computing each 
;	bit of the required sums independently.

left	.equ $80
cntr	.equ $81
rght	.equ $82
up1	.equ $83
up0	.equ $84
md1	.equ $85
md0	.equ $86
dn1	.equ $87
dn0	.equ $88
tmp	.equ $89
s1	.equ $8a
s0	.equ $8b
x1	.equ $8c

	sts	svstack

	; for each center bit of a left, center, right triplet (l,c,r),
	; cache center bit, and sums l+r and l+r+c.
	lds	#$7fff
	ldx	#$45ee
_landr  	ldaa	2,x
	lsla
	ldd	0,x
	bne	_goslo
	bcs	_goslo
	pshb		;push c
	pshb		;push l ^ r          (lower bit of l+r)
	pshb		;push l & r          (upper bit of l+r)
	pshb		;push l ^ r ^ c      (lower bit of l+r+c)
	pshb		;push l&r | (l|r)&c  (upper bit of l+r+c)
	dex
	cpx	#$4010
	bhs	_landr
	bra	_suandd
_goslo	stab	cntr
	pshb		;push c
	rolb
	stab	rght
	ldab	cntr
	lsrd
	stab	left
	tba
	eorb	rght
	pshb		;push l ^ r
	anda	rght
	psha		;push l & r
	eorb	cntr
	pshb		;push l ^ r ^ c
	ldab	left
	orab	rght
	andb	cntr
	staa	tmp
	orab	tmp
	pshb		;push l&r | (l|r)&c
	dex
	cpx	#$4010
	bhs	_landr

	; for each vertical quintet of horizontal results,
	;  compute final bit
_suandd
	lds	#$45e0
	ldx	#$7f60
_uandd   
	ldd	$00,x
	bne	_uandd1
	ldd	$50,x
	bne	_uandd1
	ldd	$a0,x
	beq	_write0     
_uandd1  
	ldd	$00,x
	std	up1	; up = upper  l+r+c sum
	ldd	$52,x
	std	md1	; md = middle  l+r  sum (excludes center)
	ldd	$a0,x
	std	dn1	; dn = lower  l+r+c sum
	eorb	md0
	eorb	up0
	orab	$54,x	; middle center bit
	stab	s0	; s0 = (up0 ^ md0 ^ dn0) | center = has an odd number of neighbors or is already alive
	ldaa	up0
	tab
	anda	dn0
	orab	dn0
	andb	md0
	staa	tmp
	orab	tmp	; b = up0 & dn0  |  (up0 | dn0) & md0 = up0&dn0 | up0&md0 | dn0&md0
	ldaa	up1
	oraa	md1
	oraa	dn1
	staa	x1	; x1 = (up1 | md1 | dn1)
	tba
	orab	x1
	stab	s1	; s1  = (up1|md1|dn1) | (up0&dn0 | up0&md0 | dn0&md0) = has at least two neighbors
	anda	x1	
	staa	tmp	; tmp = (up1|md1|dn1) & (up0&dn0 | up0&md0 | dn0&md0)
	ldaa	up1
	tab
	anda	dn1	; a = up1 & dn1
	orab	dn1
	andb	md1	; b = (up1|dn1)&md1 = up1&md1 | dn1&md1
	orab	tmp	; b = up1&md1 | dn1&md1 | ((up1|md1|dn1) & (up0&dn0 | up0&md0 | dn0&md0))
	staa	tmp
	orab	tmp	; b = (up1&dn1 | up1&md1 | dn1&md1) | ((up1|md1|dn1) & (up0&dn0 | up0&md0 | dn0&md0))
	comb		; b = ~ (has four or more neighbors) 
	andb	s1	;     & (has at least two neighbors)
	andb	s0	;     & (has an odd number of neigbhors or is already alive)
_write0
	pshb
	dex
	dex
	dex
	dex
	dex
	cpx	#$6200
	bhs	_uandd
	lds	svstack

	rts

		

;----------
; initbss
;	fill bss with 0
	.MODULE MDINITBSS
initbss
	clra
	ldx	#bss
_initbsslop
	staa	,x
	inx
	cpx	#bssend
	bne	_initbsslop
	rts


;----------
; waitkeyoff
;	wait til user is not pressing any key
	.MODULE MDWAITKEYOFF
waitkeyoff:
	ldaa	#0
	staa	$02
_waigetoffkeylop:
	ldaa	$BFFF
	nop
	nop
	cmpa	$BFFF
	bne	_waigetoffkeylop
	cmpa	#255
	bne	_waigetoffkeylop

	ldaa	#%01111010	; break ctrl shift
	staa	$02
_wbrkshctrl
	ldaa	$03
	nop
	nop
	cmpa	$03
	bne	_wbrkshctrl
	bita	#%00000010
	beq	_wbrkshctrl
	rts

;----------
; waitanykey
;	wait til user is pressing any key
	.MODULE MDWAITTHISKEY
waitanykey:
	ldaa	#0
	staa	$02
_waipresskeylop:
	ldaa	$BFFF
	nop
	nop
	cmpa	$BFFF
	bne	_waipresskeylop
	cmpa	#255
	beq	_waipresskeylop
	rts


;----------
; shift
;	ldaa #%01111111
;	staa $02
;	ldaa $03
;	bita #%00000010
;	beq pressed
;
; shift: #%01111111  #%00000010
; break: #%11111011  #%00000010
; ctrl : #%11111110  #%00000010
;
; keyboard keys sto to $02 read from $BFFF
; W #%01111111 #%00000100
; A #%11111101 #%00000001
; S #%11110111 #%00000100
; Z #%11111011 #%00001000
;
; Space G L 1 2 C E Q
; space  #%01111111 #%00001000
; G #%01111111 #%00000001
; L #%11101111 #%00000010
; 1 #%11111101 #%00010000
; 2 #%11111011 #%00010000
; C #%11110111 #%00000001
; E #%11011111 #%00000001
; Q #%11111101 #%00000100

SHIFTKEY	.equ %0111111100000010
BREAKKEY	.equ %1111101100000010
SPACEKEY	.equ %0111111100001000
GKEY	.equ %0111111100000001
LKEY	.equ %1110111100000010
WKEY	.equ %0111111100000100
AKEY	.equ %1111110100000001
SKEY	.equ %1111011100000100
ZKEY	.equ %1111101100001000
ONEKEY	.equ %1111110100010000
TWOKEY	.equ %1111101100010000
CKEY	.equ %1111011100000001
EKEY	.equ %1101111100000001
FKEY	.equ %1011111100000001

;----------
; scanspecialkey
;	d contains specialkey
;	return with Z set if specialkey pressed
	.MODULE MDSCANBREAK
scanspecialkey
	staa	$02
	stab	btemp
_deboncbr
	nop
	ldaa	$03
	nop
	nop
	cmpa	$03
	bne	_deboncbr
	bita	btemp
	rts

;----------
; scankbkey
;	d contains kbkey
;	return with Z set if kbkey pressed
	.MODULE MDSCANBREAK
scankbkey
	staa	$02
	stab	btemp
_debonckbkey
	nop
	ldaa	$BFFF
	nop
	nop
	cmpa	$BFFF
	bne	_debonckbkey
	bita	btemp
	rts


;----------
; calccursorposn
;	calculate pointer to byte under graphics cursor
;	return address in .x
	.MODULE MDCALCCURSORPOSN
calccursorposn
	ldaa	nvidmulshifts
	staa	rottemp
	clra
	ldab	grcursory
_scnmullop:
	asld
	dec	rottemp
	bne	_scnmullop
	addd	#SCREENSTART
	std	dtemp
	ldab	grcursorx
	lsrb
	lsrb	; cursorx / 4 = byte offset from start of line
	ldx	dtemp	; point to the screen line we want
	abx	; add the byte offset
	rts

;----------
; gcursoroff,
;	restore screen under graphic cursor if we need to
	.MODULE MDGCURSOROFF
gcursoroff
	ldaa	flgrcursoron
	beq	_out
	clra
	staa	flgrcursoron
	jsr	calccursorposn	; put pointer into .x
	ldaa	byteatcursor
	staa	,x
_out
	rts

;----------
; gcursoron,
;	place the graphic cursor
	.MODULE MDGCURSORON

CURSORPATTERN4	.equ %01000000
CURSORPATTERN3	.equ %00010000
CURSORPATTERN2	.equ %00000100
CURSORPATTERN1	.equ %00000001

gcursoron
	ldaa	flgrcursoron
	bne	_out	; if the cursor is already on, then rts
	inca	; ldaa #1
	staa	flgrcursoron
	jsr	calccursorposn	; put pointer into .x
	ldaa	,x
	staa	byteatcursor
	ldab	grcursorx
	andb	#3
	bne	_ck1
	; leftmost pixel
	anda	#%00111111
	oraa	#CURSORPATTERN4
	bra	_stoit
_ck1
	cmpb	#1
	bne	_ck2
	anda	#%11001111
	oraa	#CURSORPATTERN3
	bra	_stoit
_ck2
	cmpb	#2
	bne	_ck3
	anda	#%11110011
	oraa	#CURSORPATTERN2
	bra	_stoit
_ck3
	anda	#%11111100
	oraa	#CURSORPATTERN1
_stoit
	staa	,x
_out
	rts

;----------
; togglecursor,
;	toggle the cell under the graphic cursor
	.MODULE MDTOGGLECURSOR
togglecursor
	ldaa	flgrcursoron
	beq	_goon
	; cursor is on.  Turn it off.
	jmp	gcursoroff	
_goon
	; cursor is off.  Turn it on.
	jmp	gcursoron

;----------
; togglecell,
;	toggle the cell under the graphic cursor
	.MODULE MDTOGGLECELL
togglecell
	jsr	gcursoroff
	jsr	gcursoron	; kludge to refresh byteatcursor

	ldaa	byteatcursor
	ldab	grcursorx
	andb	#3
	bne	_ck1
	; leftmost pixel
	tab
	andb	#%00111111
	anda	#%11000000
	cmpa	#ZEROPATTERN4
	beq	_set0
	orab	#ZEROPATTERN4
	bra	_stoit
_set0
	orab	#NEWCELLPATTERN4
	bra	_stoit

_ck1
	cmpb	#1
	bne	_ck2
	tab
	andb	#%11001111
	anda	#%00110000
	cmpa	#ZEROPATTERN3
	beq	_set1
	orab	#ZEROPATTERN3
	bra	_stoit
_set1
	orab	#NEWCELLPATTERN3
	bra	_stoit

_ck2
	cmpb	#2
	bne	_ck3
	tab
	andb	#%11110011
	anda	#%00001100
	cmpa	#ZEROPATTERN2
	beq	_set2
	orab	#ZEROPATTERN2
	bra	_stoit
_set2
	orab	#NEWCELLPATTERN2
	bra	_stoit

_ck3
	tab
	andb	#%11111100
	anda	#%00000011
	cmpa	#ZEROPATTERN1
	beq	_set3
	orab	#ZEROPATTERN1
	bra	_stoit
_set3
	orab	#NEWCELLPATTERN1
_stoit
	stab	byteatcursor
	jsr	gcursoroff	; kludge to store byteatcursor
	jsr	gcursoron
	rts

;----------
; loadfile,
;	load a file
	.MODULE MDLOADFILE
loadfile
	jsr	copyback
	jsr	unsetgraphics
 	jsr	cleartextscreen
	ldx	#loadingtextpre
	jsr	prnmess

	jsr	waitkeyoff	; wait for no key
_waispace
	ldd	#BREAKKEY
	jsr	scanspecialkey	; returns with Z set if break pressed
	beq	_waitnobreaklop	; if he hit break, exit

	ldd	#SPACEKEY
	jsr	scankbkey
	bne	_waispace	; wait for space
	jsr	waitkeyoff	; wait for no key

	ldx	#loadingtext
	jsr	prnmess


	ldaa	#1
	staa	$4274	; (external ref) disable file type checking

	clra	; a=0 means we're looking for a program file 
	jsr	$FD8F	; read file name block, hope for type in .a (external ref)

	ldx	#ssavestart
_loadblocklop
	stx	$4278	; cass buffer address (external ref)
	jsr	$FDD0	; (external ref)
	bpl	_loadblocklop

	clra
	staa	$4274	; (external ref) re-enable file type checking

	; to do - verify that it's a proper save file
	ldx	#fakefileid
	stx	xtempsrc
	ldx	#sfakefileid
	stx	xtempdst
	ldd	#FAKEFILEIDSIZE
	jsr	cmpmem
	beq	_copyloadgrblock

	; not a save file
	ldx	#notasavefiletext
	jsr	prnmess
	jsr	waitanykey
	jsr	waitkeyoff	; wait for no key
	bra	_copycells	; we can't get graphics mode info from
	;	a file that isn't a save file

	; copy info from loaded file to proper places
	; copy graphics info
_copyloadgrblock
	ldx	#sgrmode
;	stx	xtempsrc
;	ldx	#grmode
;	stx	xtempdst
;	ldd	#GRMODESIZE
;	jsr	copymem
	jsr	setgraphicsres

	; copy screen info to screen
_copycells
	jsr	setgraphics
	; Now we copy from offscreen buffer to screen
	;	copymem - source in xtempsrc, dst in xtempdst, count in d
	ldx	#offscreen
	stx	xtempsrc
	ldx	#SCREENSTART
	stx	xtempdst
	ldd	nvidbytesperscreen
	jsr	copymem


_waitnobreaklop
	jsr	waitkeyoff	; wait for no key
	jsr	setgraphics
	;	visual cue for edit mode
	jsr	visualeditcue	; visual edit cue, eh
	rts


;----------
; visualeditcue,
;	set the palette to Baboon
visualeditcue
	ldaa	grmode
	eora	#64	; color set select bit 6
	staa	$BFFF	; switch color set select
	rts

;----------
; savefile,
;	save a file
	.MODULE MDSAVEFILE


FILNAMLEN	.equ $4256

; NAMEFILE BLOCK BUFFER ($425F-$426D)
FILNAMB	.equ $4257  ;CASSETTE SEARCH FILENAME
FILNAMA	.equ $425F  ;CASSETTE BLOCK FILENAME

FILTYP	.equ $4267  ;FILE TYPE
MLSTRT	.equ $426A  ;STARTING ADDRESS OF ML
MLLOAD	.equ $426C  ;LOADING " " "
; 
 
; * CSAVE ROUTINES (OR SEGMENTS)
 
DODATA	.equ $FC5D  ;PART OF 'CSAVE' CODE
DONFLB	.equ $FC8E  ;SAVE NAMEFILE BLK
DTSTRT	.equ $426F  ;START OF DATA
DTEND	.equ $4271  ;END OF DATA -1

lifedata	.byte "LIFEDATA"

; life-ed data file
fakefile	.byte $43, $5F, $00, $0A, $86, $22,
fakefileid	; LIFE-ED DATA FILE
	.byte $4C, $49, $46, $45, $2D, $45, $44
	.byte $20, $44
	.byte $41, $54, $41, $20, $46, $49, $4C, $45
fakefileidend
	.byte $22, $00, $00, $00, $00
fakefileend

FAKEFILESIZE	.equ fakefileend-fakefile
FAKEFILEIDSIZE	.equ fakefileidend-fakefileid

savefile

	; Now we copy from screen to offscreen buffer
	;	copymem - source in xtempsrc, dst in xtempdst, count in d
	ldx	#SCREENSTART
	stx	xtempsrc
	ldx	#offscreen
	stx	xtempdst
	ldd	nvidbytesperscreen
	jsr	copymem

	; copy graphics resolution data to save area
	ldx	#grmode
	stx	xtempsrc
	ldx	#sgrmode
	stx	xtempdst
	ldd	#GRMODESIZE
	jsr	copymem

	jsr	copyback
	jsr	unsetgraphics
 	jsr	cleartextscreen
	ldx	#savingtextpre
	jsr	prnmess

	jsr	waitkeyoff	; wait for no key
_waispace
	ldd	#BREAKKEY
	jsr	scanspecialkey	; returns with Z set if break pressed
	beq	_waitnobreaklop	; if he hit break, exit

	ldd	#SPACEKEY
	jsr	scankbkey
	bne	_waispace	; wait for space
	jsr	waitkeyoff	; wait for no key

	ldx	#savingtext
	jsr	prnmess


	; copy fake file to save area
	ldx	#fakefile
	stx	xtempsrc
	ldx	#sfakefile
	stx	xtempdst
	ldd	#FAKEFILESIZE
	jsr	copymem

	; copy filename to filename area
	ldaa	#8
	staa	FILNAMLEN
	ldx	#lifedata
	stx	xtempsrc
	ldx	#FILNAMB
	stx	xtempdst
	ldd	#8
	jsr	copymem

	clra	; file type 0 = BASIC program
;	ldaa	#01
	staa	FILTYP

	ldx	#00
	stx	MLSTRT
	stx	MLLOAD

	ldx	#ssavestart
	stx	DTSTRT
	; calculate the end of save, which will be different for
	;	the different graphics modes supported
	ldd	nvidbytesperscreen
	addd	#offscreen
	std	DTEND

	ldd	DTEND
	subd	DTSTRT
	std	MLLOAD

	jsr	DONFLB
	jsr	DODATA

_waitnobreaklop
	jsr	waitkeyoff	; wait for no key

	; Now we copy from offscreen buffer to screen
	;	because we nuked the hires screen when viewing text
	;	copymem - source in xtempsrc, dst in xtempdst, count in d
	ldx	#offscreen
	stx	xtempsrc
	ldx	#SCREENSTART
	stx	xtempdst
	ldd	nvidbytesperscreen
	jsr	copymem
	jsr	setgraphics
	jsr	visualeditcue
	rts

;----------
; setgraphicsres
;	Copy the  graphic mode info, and set the graphics mode
;	.x points to the graphic mode table to use
	.MODULE MDSETGRAPHICSRES
setgraphicsres
	;	copymem - source in xtempsrc, dst in xtempdst, count in d
	; ldx	#lgrmode
	stx	xtempsrc
	ldx	#grmode
	stx	xtempdst
	ldd	#GRMODESIZE
	jsr	copymem

	; life - init our line buffers
	ldx	#expline0
	stx	expline0addr
	ldab	npixelsperrowp2
	abx
	stx	expline1addr
	abx
	stx	expline2addr

	; expline0:	.fill 390,0	; 3 * (npixelsperrow + 2)
	ldx	#0
	ldab	npixelsperrow
	incb
	incb
	abx
	abx
	abx
	;	fillmem - movecount has count, .a has byte, .x has dest
	stx	movecount
	clra
	ldx	#expline0
	jsr	fillmem

	; and set the graphics cursor to 0,0
	clra
	staa	grcursorx
	staa	grcursory

	jsr	setgraphics
	rts

;----------
; editmode, 
;	return with Z if break
;	return with no Z if going to Generate mode

	.MODULE MDEDITMODE
editmode:
	; first, let him know something wonderful has happened
	;	visual cue for edit mode
	jsr	visualeditcue

	; do some initializations
	clra
	staa	flgrcursoron
	jsr	togglecursor

	; wait for him to get off the key
	jsr	waitkeyoff

	; main edit loop
_editlop
	jsr	togglecursor

	ldd	#BREAKKEY
	jsr	scanspecialkey	; returns with Z set if break pressed
	bne	_ckshift	
	; break hit.  Exit.
	jsr	waitkeyoff
	jmp	_leaveeditz

_ckshift
	ldd	#SHIFTKEY
	jsr	scanspecialkey	; returns with Z set if shift pressed
	bne	_scannoshift

	; shift pressed.
	jsr	gcursoroff

	; check for G key pressed (while shifted)
	ldd	#GKEY
	jsr	scankbkey
	bne	_cksh1
	; G pressed. Go back to main (to generations mode)
	ldaa	#255
	jmp	_leaveedit

_cksh1	; check for 1 key pressed (while shifted)
	ldd	#ONEKEY
	jsr	scankbkey
	bne	_cksh2
	; 1 pressed. Set lores mode
	ldx	#lgrmode
	jsr	setgraphicsres
	jsr	visualeditcue	; visual edit cue, eh
	bra	_keepgoingwnkjp
	;-
_cksh2	; check for 2 key pressed (while shifted)
	ldd	#TWOKEY
	jsr	scankbkey
	bne	_ckshc
	; 2 pressed. Set hires mode
	ldx	#hgrmode
	jsr	setgraphicsres
	jsr	visualeditcue	; visual edit cue, eh
	bra	_keepgoingwnkjp
	;-
_ckshc	; check for C key pressed (while shifted)
	ldd	#CKEY
	jsr	scankbkey
	bne	_ckshl
	; C pressed. Clear graphics screen
	jsr	cleargrscreen
	bra	_keepgoingwnkjp
	;-
_ckshl	; check for L key pressed (while shifted)
	ldd	#LKEY
	jsr	scankbkey
	bne	_ckshs
	; L pressed. Load file.
	jsr	loadfile
	bra	_keepgoingwnkjp
	;-
_ckshs	; check for S key pressed (while shifted)
	ldd	#SKEY
	jsr	scankbkey
	bne	_keepgoingjp
	; S pressed. save file
	jsr	savefile
_keepgoingwnkjp
	jmp	_keepgoingwnk
_keepgoingjp
	jmp	_keepgoing
	;-
	;-
	;-
_scannoshift
	ldd	#SPACEKEY
	jsr	scankbkey
	bne	_ckw
	; Space pressed. Toggle cell under cursor
	jsr	gcursoroff
	jsr	togglecell
	bra	_keepgoingwnk
_ckw
	ldd	#WKEY
	jsr	scankbkey
	bne	_cka
	; W pressed. cursor up.
	jsr	gcursoroff
	ldaa	grcursory
	deca
	cmpa	#255
	bne	_ckwmovcurs
	clra
_ckwmovcurs
	staa	grcursory
	jsr	gcursoron
	bra	_keepgoingwnk
	;-
_cka
	ldd	#AKEY
	jsr	scankbkey
	bne	_cks
	; A pressed. cursor left.
	jsr	gcursoroff
	ldaa	grcursorx
	deca
	cmpa	#255
	bne	_ckamovcurs
	clra
_ckamovcurs
	staa	grcursorx
	jsr	gcursoron
	bra	_keepgoingwnk
	;-
_cks
	ldd	#SKEY
	jsr	scankbkey
	bne	_ckz
	; S pressed. cursor right.
	jsr	gcursoroff
	ldaa	grcursorx
	inca
	cmpa	npixelsperrow
	blo	_cksmovcurs
	ldaa	npixelsperrow
	deca
_cksmovcurs
	staa	grcursorx
	jsr	gcursoron
	bra	_keepgoingwnk
	;-
_ckz
	ldd	#ZKEY
	jsr	scankbkey
	bne	_ckmore
	; Z pressed. cursor down.
	jsr	gcursoroff
	ldaa	grcursory
	inca
	cmpa	nscanlines
	blo	_ckzmovcurs
	ldaa	nscanlines
	deca
_ckzmovcurs
	staa	grcursory
	jsr	gcursoron
	bra	_keepgoingwnk
;-
_ckmore
	bra	_keepgoing
;-
_keepgoingwnk
	jsr	waitkeyoff
_keepgoing
	jmp	_editlop
	; end main edit loop

_leaveeditz
	anda	#0
	; leaving, Z if break, notZ if generate
_leaveedit
	tpa
	ldab	grmode
	stab	$BFFF	; switch color set select
	tap
	rts
;----------
; progmain, main program entry point
	.MODULE MDPROGMAIN
progmain:
	jsr	initbss
	jsr	copyup
	jsr	waitkeyoff

	jsr	unsetgraphics
	jsr	cleartextscreen
	ldx	#introtext
	jsr	prnmess
_waispace
	ldd	#BREAKKEY
	jsr	scanspecialkey	; returns with Z set if break pressed
	beq	_waitnobreaklop	; if he hit break, exit

	ldd	#SPACEKEY
	jsr	scankbkey
	bne	_waispace	; wait for space
	jsr	waitkeyoff	; wait for no key

	; get ready for life
	jsr	makepixelxlattbl	; set up colors

	; Copy the default lores graphic mode info
	ldx	#lgrmode
	jsr	setgraphicsres

	jsr	cleargrscreen

	; test
	ldaa	#%11111100
	staa	$4032
	ldaa	#%11111111
	staa	$4207
	staa	$4208
	ldaa	#%11110000
	staa	$4209
	; end test

	; end get ready for life


_maingeneratelop:
	tst	fastmode
	bne	_breedfast
	jsr	breedcolor
	bra	_pollkey

_breedfast
	jsr	breedmono
_pollkey
	ldd	#BREAKKEY
	jsr	scanspecialkey	; returns with Z set if break pressed
	beq	_waitnobreaklop	; break hit.  Exit.

	ldd	#SHIFTKEY
	jsr	scanspecialkey	; returns with Z set if shift pressed
	bne	_keepgoing

	ldd	#EKEY
	jsr	scankbkey
	bne	_tryslow
	jsr	docolor
	jsr	editmode	;  returns with Z set if break pressed
	;	(Z clear if going to Generate)
	beq	_waitnobreaklop	; break hit.  Exit.
	bra	_keepgoing

_tryslow
	ldd	#SKEY
	jsr	scankbkey
	bne	_tryfast
	jsr	docolor
	bra	_keepgoing

_tryfast
	ldd	#FKEY
	jsr	scankbkey
	bne	_keepgoing
	jsr	domono

_keepgoing
	bra	_maingeneratelop

_waitnobreaklop
	; he hit break
	ldd	#BREAKKEY
	jsr	scanspecialkey
	beq	_waitnobreaklop	; wait for him to get off break key

	ldaa	#255
	staa	$02

	jsr	unsetgraphics
	jsr	copyback

	rts

;----------
; domono
;	convert color mode to black and white
	.MODULE MDDOMONO
domono:
	tst	fastmode
	bne	_rts
	ldab	grmode
	cmpa	lgrmode
	beq	_rts
	ldaa	#$ff
	staa	fastmode

	sts	svstack
	ldx	#$7000
	lds	#SCREENSTART-1
_bytelp
	ldaa	#8
	staa	rottemp
	pula
	pulb
_bitlp
	lsld
	rol	,x
	lsld
	dec	rottemp
	bne	_bitlp

	inx
	cpx	#$7600
	blo	_bytelp	

	ldaa	#$38
	staa	$BFFF

	lds	#$45FF
	jmp	blit
_rts
	rts

;----------
; docolor
;	convert black and white mode to color
	.MODULE MDDOCOLOR
docolor:
	tst	fastmode
	beq	_rts
	clr	fastmode

	sts	svstack
	ldx	#$45FF
	lds	#$7BFF
_bytelp
	ldaa	#8
	staa	rottemp
_bitlp
	lsl	,x
	rolb
	rola	
	lsld
	dec	rottemp
	bne	_bitlp

	pshb
	psha
	dex
	cpx	#SCREENSTART
	bhs	_bytelp

	ldaa	#$24
	staa	$BFFF

	ldx	#$7C00
	lds	#$4BFF
	jmp	blit
_rts
	rts


;---------
; blit
;	bit-block transfer from ACCX to ACCS
	.MODULE MDBLIT
blit:
	dex
	dex
	ldd	,x
	pshb
	psha
	cpx	#$7000
	bhi	blit
	
	lds	svstack
	rts
;----------
; bss
;	bss is initialized to all 0s at the start of the program.
;	therefore, to save load time, there's no need to save this
;	area of memory along with the program.
;	This has to go at the very end of things, of course.
	.MODULE MDBSS
bss:
	.block 8	;.byte "BSSSTART"
	.block 2	;.word 0

xtempsrcnz:	.block 2	;.word 0
xtempdstnz:	.block 2	;.word 0
movecountnz:	.block 2	;.word 0

txtcursorx	.block 1	;.byte 0
txtcursory	.block 1	;.byte 0
grcursorx	.block 1	;.byte 0
grcursory	.block 1	;.byte 0
flgrcursoron	.block 1	;.byte 0
byteatcursor	.block 1	;.byte 0

expline0:	.block 390	;.fill 390,0	; 3 * (npixelsperrow + 2)

; keep these three expline together
expline0addr	.block 2	;.word 0
expline1addr	.block 2	;.word 0
expline2addr	.block 2	;.word 0

explinedst:	.block 130	;.fill 130,0

pixelxlattbl:	.block 256	;.fill 256,0

grmode	.block 1	;.byte 32 ; 32	; 64x64 multicolor
nscanlines	.block 1	;.byte 64
nvidbytesperrow	.block 1	;.byte 16
npixelsperrow	.block 1	;.byte 64
npixelsperrowp2	.block 1	;.byte 66	; npixelsperrow + 2
nvidmulshifts	.block 1	;.byte 4	; number of shifts to multiply by nvidbytesperrow
nvidbytesperscreen	.block 2	;.word 1024	; number of bytes in screen
nbitpatterns	.block 1	;.byte 0	; not used
padd	.block 2	;.word 0

; storestuff, enough space to store128+1024 bytes
storestuff:	.block 1152	;.fill 1152,0	; 1024+128

; ==== keep this stuff together -- it's our load/save image ====
ssavestart
sfakefile	.block 6	;.byte $43, $5F, $00, $0A, $86, $22,
sfakefileid	.block 17	;.byte "LIFE-ED DATA FILE"
sfakefileidend	.block 5	;.byte $22, $00, $00, $00, $00
sfakefileend

sgrmode	.block 1	;.byte 32 ; 32	; 64x64 multicolor
snscanlines	.block 1	;.byte 64
snvidbytesperrow	.block 1	;.byte 16
snpixelsperrow	.block 1	;.byte 64
snpixelsperrowp2	.block 1	;.byte 66	; npixelsperrow + 2
snvidmulshifts	.block 1	;.byte 4	; number of shifts to multiply by nvidbytesperrow
snbitpatterns	.block 1	;.byte 0	; not used
snvidbytesperscreen	.block 2	;.word 1024	; number of bytes in screen
offscreen:	.block 3072	;.fill 3072,0
offscreenend:	.block 1	;.byte 0
ssaveend	.block 1	;.byte 0

bssend	.block 2	;.word 0

	.end
